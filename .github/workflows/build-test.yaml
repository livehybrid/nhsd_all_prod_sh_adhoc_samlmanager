name: Splunk App CI/CD

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          architecture: "x64"
      - name: "Setup Environment"
        run: |
          python -m pip install --upgrade pip
          pip install splunk-appinspect splunk-packaging-toolkit grip dunamai crudini
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          REPO_NAME="${{ github.repository }}"
          APP_NAME=${REPO_NAME}
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Generate Documentation
        run: |
          cat README.md | sed "s/$APP_NAME\/appserver/appserver/g" > $APP_NAME/README.md
          grip README.md --export README.html --title ""
          #pandoc -s README.html -o $APP_NAME/README.pdf

      - name: Customise Add-on build configs
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            APP_VERSION=$(dunamai from git)
          else
            APP_VERSION=$(dunamai from git --format "{base}+{distance}")
          fi
          echo $APP_VERSION
          crudini --set "${APP_NAME}/default/app.conf" launcher version "${APP_VERSION}"
          crudini --set "${APP_NAME}/default/app.conf" id version "${APP_VERSION}"

      - name: Generating package
        run: |
          set -x
          rm -rf output/app/lib/3rdparty/**/*.pyc || true
          rm -rf output/app/lib/__pycache__ || true
          find $APP_NAME -type d -exec chmod 755 {} +
          find $APP_NAME -type f -not -path "*$APP_NAME/bin/*" -exec chmod 644 {} +
          mkdir -p dist
          slim package $APP_NAME -o dist

      - name: Local Inspect package
        run: |
          PACKAGE=$(ls dist/*)
          mkdir -p reports
          splunk-appinspect inspect $PACKAGE --mode=precert --data-format junitxml --output-file reports/$APP_NAME-splunk_appinspect.xml --excluded-tags manual --excluded-tags prerelease  --included-tags splunk_appinspect
          splunk-appinspect inspect $PACKAGE --mode=precert --data-format junitxml --output-file reports/$APP_NAME-cloud.xml --excluded-tags manual --excluded-tags prerelease  --included-tags cloud
          splunk-appinspect inspect $PACKAGE --mode=precert --data-format junitxml --output-file reports/$APP_NAME-private-victoria.xml --included-tags private_victoria
          splunk-appinspect inspect $PACKAGE --mode=precert --data-format junitxml --output-file reports/$APP_NAME-future.xml --included-tags future
          
  
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports
          
      # - name: Run App Inspect CLI
      #   uses: splunk/appinspect-cli-action@v1.5
      #   with:
      #     app_path: $PACKAGE
      #     included_tags: cloud, splunk_appinspect

      - uses: splunk/appinspect-api-action@v3.0
        name: "AppInspect API"
        with:
          username: ${{ secrets.SPLUNKBASE_USERNAME }}
          password: ${{ secrets.SPLUNKBASE_PASSWORD }}
          app_path: dist
          included_tags: "private_victoria"
          excluded_tags: "offensive"

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/


  publish-gh:
    needs: package
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    container: cimg/go:1.19
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: .
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          allowUpdates: true